<dec f='WebKit/Source/JavaScriptCore/b3/B3Opcode.h' l='327' type='78'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3Opcode.h' l='374' c='_ZN3JSC2B311isCheckMathENS0_6OpcodeE'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3ValueKey.h' l='124' c='_ZNK3JSC2B38ValueKey14canMaterializeEv'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3Value.h' l='474' c='_ZN3JSC2B35Value18adjacencyListSpaceENS0_4KindE'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3StackmapValue.h' l='53' c='_ZN3JSC2B313StackmapValue7acceptsENS0_4KindE'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3CheckValue.h' l='39' c='_ZN3JSC2B310CheckValue7acceptsENS0_4KindE'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3ValueInlines.h' l='163' c='_ZNK3JSC2B35Value19adjacencyListOffsetEv'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3ValueInlines.h' l='163' c='_ZNK3JSC2B35Value9cloneImplEv'/>
<doc f='WebKit/Source/JavaScriptCore/b3/B3Opcode.h' l='305'>// Checked math. Use the CheckValue class. Like a Patchpoint, this takes a code generation
    // callback. That callback gets to emit some code after the epilogue, and gets to link the jump
    // from the check, and the choice of registers. You also get to supply a stackmap. Note that you
    // are not allowed to jump back into the mainline code from your slow path, since the compiler
    // will assume that the execution of these instructions proves that overflow didn&apos;t happen. For
    // example, if you have two CheckAdd&apos;s:
    //
    // a = CheckAdd(x, y)
    // b = CheckAdd(x, y)
    //
    // Then it&apos;s valid to change this to:
    //
    // a = CheckAdd(x, y)
    // b = Identity(a)
    //
    // This is valid regardless of the callbacks used by the two CheckAdds. They may have different
    // callbacks. Yet, this transformation is valid even if they are different because we know that
    // after the first CheckAdd executes, the second CheckAdd could not have possibly taken slow
    // path. Therefore, the second CheckAdd&apos;s callback is irrelevant.
    //
    // Note that the first two children of these operations have ValueRep&apos;s as input constraints but do
    // not have output constraints.</doc>
<use f='WebKit/Source/JavaScriptCore/ftl/FTLOutput.cpp' l='780' u='r' c='_ZN3JSC3FTL6Output12speculateAddEPNS_2B35ValueES4_'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3CheckSpecial.cpp' l='48' c='_ZN3JSC2B312_GLOBAL__N_19numB3ArgsENS0_4KindE'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3CheckValue.cpp' l='39' u='r' c='_ZN3JSC2B310CheckValue12convertToAddEv'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3CheckValue.cpp' l='40' u='r' c='_ZN3JSC2B310CheckValue12convertToAddEv'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3LowerToAir.cpp' l='3737' c='_ZN3JSC2B312_GLOBAL__N_110LowerToAir5lowerEv'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3LowerToAir.cpp' l='3769' c='_ZN3JSC2B312_GLOBAL__N_110LowerToAir5lowerEv'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3Opcode.cpp' l='336' c='_ZN3WTF13printInternalERNS_11PrintStreamEN3JSC2B36OpcodeE'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3Procedure.cpp' l='463' c='_ZN3JSC2B39Procedure33freeUnneededB3ValuesAfterLoweringEv'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3ReduceStrength.cpp' l='2103' c='_ZN3JSC2B312_GLOBAL__N_114ReduceStrength19reduceValueStrengthEv'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3Validate.cpp' l='466' c='_ZN3JSC2B312_GLOBAL__N_19Validater3runEv'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3Value.cpp' l='645' c='_ZNK3JSC2B35Value7effectsEv'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3Value.cpp' l='737' c='_ZNK3JSC2B35Value3keyEv'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3Value.cpp' l='832' c='_ZN3JSC2B35Value7typeForENS0_4KindEPS1_S3_'/>
