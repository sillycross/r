<dec f='WebKit/Source/WebCore/page/scrolling/ScrollingMomentumCalculator.h' l='71' type='void WebCore::BasicScrollingMomentumCalculator::initializeInterpolationCoefficientsIfNecessary()'/>
<use f='WebKit/Source/WebCore/page/scrolling/ScrollingMomentumCalculator.cpp' l='107' u='c' c='_ZN7WebCore32BasicScrollingMomentumCalculator28scrollOffsetAfterElapsedTimeEN3WTF7SecondsE'/>
<def f='WebKit/Source/WebCore/page/scrolling/ScrollingMomentumCalculator.cpp' l='141' ll='173' type='void WebCore::BasicScrollingMomentumCalculator::initializeInterpolationCoefficientsIfNecessary()'/>
<doc f='WebKit/Source/WebCore/page/scrolling/ScrollingMomentumCalculator.cpp' l='121'>/**
 * Computes and sets coefficients required for interpolated snapping when scrolling in 2 dimensions, given
 * initial conditions (the initial and target vectors, along with the initial wheel delta as a vector). The
 * path is a cubic Bezier curve of the form p(s) = INITIAL + (C_1 * s) + (C_2 * s^2) + (C_3 * s^3) where each
 * C_i is a 2D vector and INITIAL is the vector representing the initial scroll offset. s is a real in the
 * interval [0, 1] indicating the &quot;progress&quot; of the curve (i.e. how much of the curve has been traveled).
 *
 * The curve has 4 control points, the first and last of which are the initial and target points, respectively.
 * The distances between adjacent control points are constrained to be the same, making the convex hull an
 * isosceles trapezoid with 3 sides of equal length. Additionally, the vector from the first control point to
 * the second points in the same direction as the initial scroll delta. These constraints ensure two properties:
 *     1. The direction of the snap animation at s=0 will be equal to the direction of the initial scroll delta.
 *     2. Points at regular intervals of s will be evenly spread out.
 *
 * If the initial scroll direction is orthogonal to or points in the opposite direction as the vector from the
 * initial point to the target point, initialization returns early and sets the curve to animate directly to the
 * snap point without cubic interpolation.
 *
 * FIXME: This should be refactored to use UnitBezier.
 */</doc>
