<dec f='WebKit/Source/WTF/wtf/dtoa/bignum-dtoa.h' l='80' type='void WTF::double_conversion::BignumDtoa(double v, WTF::double_conversion::BignumDtoaMode mode, int requested_digits, BufferReference&lt;char&gt; buffer, int * length, int * point)'/>
<def f='WebKit/Source/WTF/wtf/dtoa/bignum-dtoa.cc' l='92' ll='172' type='void WTF::double_conversion::BignumDtoa(double v, WTF::double_conversion::BignumDtoaMode mode, int requested_digits, BufferReference&lt;char&gt; buffer, int * length, int * decimal_point)'/>
<doc f='WebKit/Source/WTF/wtf/dtoa/bignum-dtoa.h' l='51'>// Converts the given double &apos;v&apos; to ascii.
// The result should be interpreted as buffer * 10^(point-length).
// The buffer will be null-terminated.
//
// The input v must be &gt; 0 and different from NaN, and Infinity.
//
// The output depends on the given mode:
//  - SHORTEST: produce the least amount of digits for which the internal
//   identity requirement is still satisfied. If the digits are printed
//   (together with the correct exponent) then reading this number will give
//   &apos;v&apos; again. The buffer will choose the representation that is closest to
//   &apos;v&apos;. If there are two at the same distance, than the number is round up.
//   In this mode the &apos;requested_digits&apos; parameter is ignored.
//  - FIXED: produces digits necessary to print a given number with
//   &apos;requested_digits&apos; digits after the decimal point. The produced digits
//   might be too short in which case the caller has to fill the gaps with &apos;0&apos;s.
//   Example: toFixed(0.001, 5) is allowed to return buffer=&quot;1&quot;, point=-2.
//   Halfway cases are rounded up. The call toFixed(0.15, 2) thus returns
//     buffer=&quot;2&quot;, point=0.
//   Note: the length of the returned buffer has no meaning wrt the significance
//   of its digits. That is, just because it contains &apos;0&apos;s does not mean that
//   any other digit would not satisfy the internal identity requirement.
//  - PRECISION: produces &apos;requested_digits&apos; where the first digit is not &apos;0&apos;.
//   Even though the length of produced digits usually equals
//   &apos;requested_digits&apos;, the function is allowed to return fewer digits, in
//   which case the caller has to fill the missing digits with &apos;0&apos;s.
//   Halfway cases are again rounded up.
// &apos;BignumDtoa&apos; expects the given buffer to be big enough to hold all digits
// and a terminating null-character.</doc>
<use f='WebKit/Source/WTF/wtf/dtoa/double-conversion.cc' l='420' u='c' c='_ZN3WTF17double_conversion23DoubleToStringConverter13DoubleToAsciiEdNS1_8DtoaModeEiPciPbPiS5_'/>
