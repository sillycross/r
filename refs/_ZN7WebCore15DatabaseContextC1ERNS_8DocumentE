<dec f='WebKit/Source/WebCore/Modules/webdatabase/DatabaseContext.h' l='70' type='void WebCore::DatabaseContext::DatabaseContext(WebCore::Document &amp; )'/>
<def f='WebKit/Source/WebCore/Modules/webdatabase/DatabaseContext.cpp' l='97' ll='105' type='void WebCore::DatabaseContext::DatabaseContext(WebCore::Document &amp; document)'/>
<use f='WebKit/Source/WebCore/Modules/webdatabase/DatabaseManager.cpp' l='105' u='c' c='_ZN7WebCore15DatabaseManager15databaseContextERNS_8DocumentE'/>
<doc f='WebKit/Source/WebCore/Modules/webdatabase/DatabaseContext.cpp' l='46'>// How the DatabaseContext Life-Cycle works?
// ========================================
// ... in other words, who&apos;s keeping the DatabaseContext alive and how long does
// it need to stay alive?
//
// The DatabaseContext is referenced from RefPtrs in:
// 1. ScriptExecutionContext
// 2. Database
//
// At Birth:
// ========
// We create a DatabaseContext only when there is a need i.e. the script tries to
// open a Database via DatabaseManager::openDatabase().
//
// The DatabaseContext constructor will call setDatabaseContext() on the
// the ScriptExecutionContext. This sets the RefPtr in the ScriptExecutionContext
// for keeping the DatabaseContext alive. Since the DatabaseContext is only
// created from the script thread, it is safe for the constructor to call
// ScriptExecutionContext::setDatabaseContext().
//
// Once a DatabaseContext is associated with a ScriptExecutionContext, it will
// live until after the ScriptExecutionContext destructs. This is true even if
// we don&apos;t succeed in opening any Databases for that context. When we do
// succeed in opening Databases for this ScriptExecutionContext, the Database
// will re-use the same DatabaseContext.
//
// At Shutdown:
// ===========
// During shutdown, the DatabaseContext needs to:
// 1. &quot;outlive&quot; the ScriptExecutionContext.
//    - This is needed because the DatabaseContext needs to remove itself from the
//      ScriptExecutionContext&apos;s ActiveDOMObject list and ContextDestructionObserver
//      list. This removal needs to be executed on the script&apos;s thread. Hence, we
//      rely on the ScriptExecutionContext&apos;s shutdown process to call
//      stop() and contextDestroyed() to give us a chance to clean these up from
//      the script thread.
//
// 2. &quot;outlive&quot; the Databases.
//    - This is because they may make use of the DatabaseContext to execute a close
//      task and shutdown in an orderly manner. When the Databases are destructed,
//      they will deref the DatabaseContext from the DatabaseThread.
//
// During shutdown, the ScriptExecutionContext is shutting down on the script thread
// while the Databases are shutting down on the DatabaseThread. Hence, there can be
// a race condition as to whether the ScriptExecutionContext or the Databases
// destruct first.
//
// The RefPtrs in the Databases and ScriptExecutionContext will ensure that the
// DatabaseContext will outlive both regardless of which of the 2 destructs first.</doc>
