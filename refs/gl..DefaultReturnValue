<def f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='27' ll='31'/>
<def f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='34' ll='38'/>
<def f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='40' ll='44'/>
<def f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='46' ll='50'/>
<def f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='53' ll='57'/>
<def f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='59' ll='63'/>
<def f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='66' ll='70'/>
<use f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='67'/>
<def f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='73' ll='77'/>
<use f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='74'/>
<def f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='80' ll='84'/>
<use f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='81'/>
<use f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='89' c='_ZN2gl21GetDefaultReturnValueEv'/>
<size>1</size>
<doc f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='26'>// Default return values for each basic return type.</doc>
<doc f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='33'>// This doubles as the GLenum return value.</doc>
<doc f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='52'>// Catch-all rules for pointer types.</doc>
<doc f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='65'>// Overloaded to return invalid index</doc>
<doc f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='72'>// Specialized enum error value.</doc>
<doc f='WebKit/Source/ThirdParty/ANGLE/src/libANGLE/entry_points_utils.h' l='79'>// glTestFenceNV should still return TRUE for an invalid fence.</doc>
<smbr r='gl::DefaultReturnValue{EP,int}::kValue' t='const GLint'/>
<smbr r='gl::DefaultReturnValue{EP,unsignedint}::kValue' t='const GLuint'/>
<smbr r='gl::DefaultReturnValue{EP,unsignedchar}::kValue' t='const GLboolean'/>
<smbr r='gl::DefaultReturnValue{EP,gl::ShaderProgramID}::kValue' t='const gl::ShaderProgramID'/>
<smbr r='gl::DefaultReturnValue{EP,consttype-parameter-0-1*}::kValue' t='const PointerType *const'/>
<smbr r='gl::DefaultReturnValue{EP,type-parameter-0-1*}::kValue' t='PointerType *const'/>
<smbr r='gl::DefaultReturnValue{gl::EntryPoint::GetUniformBlockIndex,unsignedint}::kValue' t='const GLuint'/>
<smbr r='gl::DefaultReturnValue{gl::EntryPoint::ClientWaitSync,unsignedint}::kValue' t='const GLenum'/>
<smbr r='gl::DefaultReturnValue{gl::EntryPoint::TestFenceNV,unsignedchar}::kValue' t='const GLboolean'/>
