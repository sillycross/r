<use f='include/gstreamer-1.0/gst/base/gstbasetransform.h' l='75'/>
<def f='include/gstreamer-1.0/gst/base/gstbasetransform.h' l='218' ll='302'/>
<size>816</size>
<doc f='include/gstreamer-1.0/gst/base/gstbasetransform.h' l='104'>/**
 * GstBaseTransformClass:
 * @parent_class:   Element parent class
 * @passthrough_on_same_caps: If set to %TRUE, passthrough mode will be
 *                            automatically enabled if the caps are the same.
 *                            Set to %FALSE by default.
 * @transform_ip_on_passthrough: If set to %TRUE, @transform_ip will be called in
 *                           passthrough mode. The passed buffer might not be
 *                           writable. When %FALSE, neither @transform nor
 *                           @transform_ip will be called in passthrough mode.
 *                           Set to %TRUE by default.
 * @transform_caps: Optional.  Given the pad in this direction and the given
 *                  caps, what caps are allowed on the other pad in this
 *                  element ?
 * @fixate_caps:    Optional. Given the pad in this direction and the given
 *                  caps, fixate the caps on the other pad. The function takes
 *                  ownership of @othercaps and returns a fixated version of
 *                  @othercaps. @othercaps is not guaranteed to be writable.
 * @accept_caps:    Optional.
 *                  Subclasses can override this method to check if @caps can be
 *                  handled by the element. The default implementation might not be
 *                  the most optimal way to check this in all cases.
 * @set_caps:       allows the subclass to be notified of the actual caps set.
 * @query:          Optional.
 *                  Handle a requested query. Subclasses that implement this
 *                  should must chain up to the parent if they didn&apos;t handle the
 *                  query
 * @decide_allocation: Setup the allocation parameters for allocating output
 *                    buffers. The passed in query contains the result of the
 *                    downstream allocation query. This function is only called
 *                    when not operating in passthrough mode. The default
 *                    implementation will remove all memory dependent metadata.
 *                    If there is a @filter_meta method implementation, it will
 *                    be called for all metadata API in the downstream query,
 *                    otherwise the metadata API is removed.
 * @filter_meta: Return %TRUE if the metadata API should be proposed in the
 *               upstream allocation query. The default implementation is %NULL
 *               and will cause all metadata to be removed.
 * @propose_allocation: Propose buffer allocation parameters for upstream elements.
 *                      This function must be implemented if the element reads or
 *                      writes the buffer content. The query that was passed to
 *                      the decide_allocation is passed in this method (or %NULL
 *                      when the element is in passthrough mode). The default
 *                      implementation will pass the query downstream when in
 *                      passthrough mode and will copy all the filtered metadata
 *                      API in non-passthrough mode.
 * @transform_size: Optional. Given the size of a buffer in the given direction
 *                  with the given caps, calculate the size in bytes of a buffer
 *                  on the other pad with the given other caps.
 *                  The default implementation uses get_unit_size and keeps
 *                  the number of units the same.
 * @get_unit_size:  Required if the transform is not in-place.
 *                  get the size in bytes of one unit for the given caps.
 * @start:          Optional.
 *                  Called when the element starts processing.
 *                  Allows opening external resources.
 * @stop:           Optional.
 *                  Called when the element stops processing.
 *                  Allows closing external resources.
 * @sink_event:     Optional.
 *                  Event handler on the sink pad. The default implementation
 *                  handles the event and forwards it downstream.
 * @src_event:      Optional.
 *                  Event handler on the source pad. The default implementation
 *                  handles the event and forwards it upstream.
 * @prepare_output_buffer: Optional.
 *                         Subclasses can override this to do their own
 *                         allocation of output buffers.  Elements that only do
 *                         analysis can return a subbuffer or even just
 *                         return a reference to the input buffer (if in
 *                         passthrough mode). The default implementation will
 *                         use the negotiated allocator or bufferpool and
 *                         transform_size to allocate an output buffer or it
 *                         will return the input buffer in passthrough mode.
 * @copy_metadata: Optional.
 *                 Copy the metadata from the input buffer to the output buffer.
 *                 The default implementation will copy the flags, timestamps and
 *                 offsets of the buffer.
 * @transform_meta: Optional. Transform the metadata on the input buffer to the
 *                  output buffer. By default this method copies all meta without
 *                  tags. subclasses can implement this method and return %TRUE if
 *                  the metadata is to be copied.
 * @before_transform: Optional.
 *                    This method is called right before the base class will
 *                    start processing. Dynamic properties or other delayed
 *                    configuration could be performed in this method.
 * @transform:      Required if the element does not operate in-place.
 *                  Transforms one incoming buffer to one outgoing buffer.
 *                  The function is allowed to change size/timestamp/duration
 *                  of the outgoing buffer.
 * @transform_ip:   Required if the element operates in-place.
 *                  Transform the incoming buffer in-place.
 * @submit_input_buffer: Function which accepts a new input buffer and pre-processes it.
 *                  The default implementation performs caps (re)negotiation, then
 *                  QoS if needed, and places the input buffer into the @queued_buf
 *                  member variable. If the buffer is dropped due to QoS, it returns
 *                  GST_BASE_TRANSFORM_FLOW_DROPPED. If this input buffer is not
 *                  contiguous with any previous input buffer, then @is_discont
 *                  is set to %TRUE. (Since: 1.6)
 * @generate_output: Called after each new input buffer is submitted repeatedly
 *                   until it either generates an error or fails to generate an output
 *                   buffer. The default implementation takes the contents of the
 *                   @queued_buf variable, generates an output buffer if needed
 *                   by calling the class @prepare_output_buffer, and then
 *                   calls either @transform or @transform_ip. Elements that don&apos;t
 *                   do 1-to-1 transformations on input to output buffers can either
 *                   return GST_BASE_TRANSFORM_FLOW_DROPPED or simply not generate
 *                   an output buffer until they are ready to do so. (Since: 1.6)
 *
 * Subclasses can override any of the available virtual methods or not, as
 * needed. At minimum either @transform or @transform_ip need to be overridden.
 * If the element can overwrite the input data with the results (data is of the
 * same type and quantity) it should provide @transform_ip.
 */</doc>
<mbr r='_GstBaseTransformClass::parent_class' o='0' t='GstElementClass'/>
<mbr r='_GstBaseTransformClass::passthrough_on_same_caps' o='3904' t='gboolean'/>
<mbr r='_GstBaseTransformClass::transform_ip_on_passthrough' o='3936' t='gboolean'/>
<mbr r='_GstBaseTransformClass::transform_caps' o='3968' t='GstCaps *(*)(GstBaseTransform *, GstPadDirection, GstCaps *, GstCaps *)'/>
<mbr r='_GstBaseTransformClass::fixate_caps' o='4032' t='GstCaps *(*)(GstBaseTransform *, GstPadDirection, GstCaps *, GstCaps *)'/>
<mbr r='_GstBaseTransformClass::accept_caps' o='4096' t='gboolean (*)(GstBaseTransform *, GstPadDirection, GstCaps *)'/>
<mbr r='_GstBaseTransformClass::set_caps' o='4160' t='gboolean (*)(GstBaseTransform *, GstCaps *, GstCaps *)'/>
<mbr r='_GstBaseTransformClass::query' o='4224' t='gboolean (*)(GstBaseTransform *, GstPadDirection, GstQuery *)'/>
<mbr r='_GstBaseTransformClass::decide_allocation' o='4288' t='gboolean (*)(GstBaseTransform *, GstQuery *)'/>
<mbr r='_GstBaseTransformClass::filter_meta' o='4352' t='gboolean (*)(GstBaseTransform *, GstQuery *, GType, const GstStructure *)'/>
<mbr r='_GstBaseTransformClass::propose_allocation' o='4416' t='gboolean (*)(GstBaseTransform *, GstQuery *, GstQuery *)'/>
<mbr r='_GstBaseTransformClass::transform_size' o='4480' t='gboolean (*)(GstBaseTransform *, GstPadDirection, GstCaps *, gsize, GstCaps *, gsize *)'/>
<mbr r='_GstBaseTransformClass::get_unit_size' o='4544' t='gboolean (*)(GstBaseTransform *, GstCaps *, gsize *)'/>
<mbr r='_GstBaseTransformClass::start' o='4608' t='gboolean (*)(GstBaseTransform *)'/>
<mbr r='_GstBaseTransformClass::stop' o='4672' t='gboolean (*)(GstBaseTransform *)'/>
<mbr r='_GstBaseTransformClass::sink_event' o='4736' t='gboolean (*)(GstBaseTransform *, GstEvent *)'/>
<mbr r='_GstBaseTransformClass::src_event' o='4800' t='gboolean (*)(GstBaseTransform *, GstEvent *)'/>
<mbr r='_GstBaseTransformClass::prepare_output_buffer' o='4864' t='GstFlowReturn (*)(GstBaseTransform *, GstBuffer *, GstBuffer **)'/>
<mbr r='_GstBaseTransformClass::copy_metadata' o='4928' t='gboolean (*)(GstBaseTransform *, GstBuffer *, GstBuffer *)'/>
<mbr r='_GstBaseTransformClass::transform_meta' o='4992' t='gboolean (*)(GstBaseTransform *, GstBuffer *, GstMeta *, GstBuffer *)'/>
<mbr r='_GstBaseTransformClass::before_transform' o='5056' t='void (*)(GstBaseTransform *, GstBuffer *)'/>
<mbr r='_GstBaseTransformClass::transform' o='5120' t='GstFlowReturn (*)(GstBaseTransform *, GstBuffer *, GstBuffer *)'/>
<mbr r='_GstBaseTransformClass::transform_ip' o='5184' t='GstFlowReturn (*)(GstBaseTransform *, GstBuffer *)'/>
<mbr r='_GstBaseTransformClass::submit_input_buffer' o='5248' t='GstFlowReturn (*)(GstBaseTransform *, gboolean, GstBuffer *)'/>
<mbr r='_GstBaseTransformClass::generate_output' o='5312' t='GstFlowReturn (*)(GstBaseTransform *, GstBuffer **)'/>
<mbr r='_GstBaseTransformClass::_gst_reserved' o='5376' t='gpointer [18]'/>
