<def f='WebKit/Source/WebCore/Modules/webdatabase/Database.cpp' l='93' type='const char [25]'/>
<use f='WebKit/Source/WebCore/Modules/webdatabase/Database.cpp' l='455' u='r' c='_ZN7WebCore8Database22getVersionFromDatabaseERN3WTF6StringEb'/>
<use f='WebKit/Source/WebCore/Modules/webdatabase/Database.cpp' l='475' u='r' c='_ZN7WebCore8Database20setVersionInDatabaseERKN3WTF6StringEb'/>
<doc f='WebKit/Source/WebCore/Modules/webdatabase/Database.cpp' l='64'>// Registering &quot;opened&quot; databases with the DatabaseTracker
// =======================================================
// The DatabaseTracker maintains a list of databases that have been
// &quot;opened&quot; so that the client can call interrupt or delete on every database
// associated with a DatabaseContext.
//
// We will only call DatabaseTracker::addOpenDatabase() to add the database
// to the tracker as opened when we&apos;ve succeeded in opening the database,
// and will set m_opened to true. Similarly, we only call
// DatabaseTracker::removeOpenDatabase() to remove the database from the
// tracker when we set m_opened to false in closeDatabase(). This sets up
// a simple symmetry between open and close operations, and a direct
// correlation to adding and removing databases from the tracker&apos;s list,
// thus ensuring that we have a correct list for the interrupt and
// delete operations to work on.
//
// The only databases instances not tracked by the tracker&apos;s open database
// list are the ones that have not been added yet, or the ones that we
// attempted an open on but failed to. Such instances only exist in the
// factory functions for creating database backends.
//
// The factory functions will either call openAndVerifyVersion() or
// performOpenAndVerify(). These methods will add the newly instantiated
// database backend if they succeed in opening the requested database.
// In the case of failure to open the database, the factory methods will
// simply discard the newly instantiated database backend when they return.
// The ref counting mechanims will automatically destruct the un-added
// (and un-returned) databases instances.</doc>
