<def f='WebKit/Source/JavaScriptCore/API/glib/JSCContext.cpp' l='887' ll='908' type='JSCValue * jsc_context_evaluate_in_object(JSCContext * context, const char * code, gssize length, gpointer instance, JSCClass * objectClass, const char * uri, unsigned int lineNumber, JSCValue ** object)'/>
<doc f='WebKit/Source/JavaScriptCore/API/glib/JSCContext.cpp' l='868'>/**
 * jsc_context_evaluate_in_object:
 * @context: a #JSCContext
 * @code: a JavaScript script to evaluate
 * @length: length of @code, or -1 if @code is a nul-terminated string
 * @object_instance: (nullable): an object instance
 * @object_class: (nullable): a #JSCClass or %NULL to use the default
 * @uri: the source URI
 * @line_number: the starting line number
 * @object: (out) (transfer full): return location for a #JSCValue.
 *
 * Evaluate @code and create an new object where symbols defined in @code will be added as properties,
 * instead of being added to @context global object. The new object is returned as @object parameter.
 * Similar to how jsc_value_new_object() works, if @object_instance is not %NULL @object_class must be provided too.
 * The @line_number is the starting line number in @uri; the value is one-based so the first line is 1.
 * @uri and @line_number will be shown in exceptions and they don&apos;t affect the behavior of the script.
 *
 * Returns: (transfer full): a #JSCValue representing the last value generated by the script.
 */</doc>
