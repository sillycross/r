<dec f='include/wayland-client-protocol.h' l='524' type='const struct wl_interface'/>
<use f='include/wayland-client-protocol.h' l='1216' u='a' c='_ZL28wl_compositor_create_surfaceP13wl_compositor'/>
<dec f='include/wayland-server-protocol.h' l='527' type='const struct wl_interface'/>
<def f='include/wayland-server-protocol.h' l='2770' ll='3127'/>
<size>80</size>
<doc f='include/wayland-client-protocol.h' l='479'>/**
 * @defgroup iface_wl_surface The wl_surface interface
 *
 * A surface is a rectangular area that may be displayed on zero
 * or more outputs, and shown any number of times at the compositor&apos;s
 * discretion. They can present wl_buffers, receive user input, and
 * define a local coordinate system.
 *
 * The size of a surface (and relative positions on it) is described
 * in surface-local coordinates, which may differ from the buffer
 * coordinates of the pixel content, in case a buffer_transform
 * or a buffer_scale is used.
 *
 * A surface without a &quot;role&quot; is fairly useless: a compositor does
 * not know where, when or how to present it. The role is the
 * purpose of a wl_surface. Examples of roles are a cursor for a
 * pointer (as set by wl_pointer.set_cursor), a drag icon
 * (wl_data_device.start_drag), a sub-surface
 * (wl_subcompositor.get_subsurface), and a window as defined by a
 * shell protocol (e.g. wl_shell.get_shell_surface).
 *
 * A surface can have only one role at a time. Initially a
 * wl_surface does not have a role. Once a wl_surface is given a
 * role, it is set permanently for the whole lifetime of the
 * wl_surface object. Giving the current role again is allowed,
 * unless explicitly forbidden by the relevant interface
 * specification.
 *
 * Surface roles are given by requests in other interfaces such as
 * wl_pointer.set_cursor. The request should explicitly mention
 * that this request gives a role to a wl_surface. Often, this
 * request also creates a new protocol object that represents the
 * role and adds additional functionality to wl_surface. When a
 * client wants to destroy a wl_surface, they must destroy this &apos;role
 * object&apos; before the wl_surface.
 *
 * Destroying the role object does not remove the role from the
 * wl_surface, but it may stop the wl_surface from &quot;playing the role&quot;.
 * For instance, if a wl_subsurface object is destroyed, the wl_surface
 * it was created for will be unmapped and forget its position and
 * z-order. It is allowed to create a wl_subsurface for the same
 * wl_surface again, but it is not allowed to use the wl_surface as
 * a cursor (cursor is a different role than sub-surface, and role
 * switching is not allowed).
 */</doc>
<doc f='include/wayland-server-protocol.h' l='482'>/**
 * @defgroup iface_wl_surface The wl_surface interface
 *
 * A surface is a rectangular area that may be displayed on zero
 * or more outputs, and shown any number of times at the compositor&apos;s
 * discretion. They can present wl_buffers, receive user input, and
 * define a local coordinate system.
 *
 * The size of a surface (and relative positions on it) is described
 * in surface-local coordinates, which may differ from the buffer
 * coordinates of the pixel content, in case a buffer_transform
 * or a buffer_scale is used.
 *
 * A surface without a &quot;role&quot; is fairly useless: a compositor does
 * not know where, when or how to present it. The role is the
 * purpose of a wl_surface. Examples of roles are a cursor for a
 * pointer (as set by wl_pointer.set_cursor), a drag icon
 * (wl_data_device.start_drag), a sub-surface
 * (wl_subcompositor.get_subsurface), and a window as defined by a
 * shell protocol (e.g. wl_shell.get_shell_surface).
 *
 * A surface can have only one role at a time. Initially a
 * wl_surface does not have a role. Once a wl_surface is given a
 * role, it is set permanently for the whole lifetime of the
 * wl_surface object. Giving the current role again is allowed,
 * unless explicitly forbidden by the relevant interface
 * specification.
 *
 * Surface roles are given by requests in other interfaces such as
 * wl_pointer.set_cursor. The request should explicitly mention
 * that this request gives a role to a wl_surface. Often, this
 * request also creates a new protocol object that represents the
 * role and adds additional functionality to wl_surface. When a
 * client wants to destroy a wl_surface, they must destroy this &apos;role
 * object&apos; before the wl_surface.
 *
 * Destroying the role object does not remove the role from the
 * wl_surface, but it may stop the wl_surface from &quot;playing the role&quot;.
 * For instance, if a wl_subsurface object is destroyed, the wl_surface
 * it was created for will be unmapped and forget its position and
 * z-order. It is allowed to create a wl_subsurface for the same
 * wl_surface again, but it is not allowed to use the wl_surface as
 * a cursor (cursor is a different role than sub-surface, and role
 * switching is not allowed).
 */</doc>
<doc f='include/wayland-server-protocol.h' l='2766'>/**
 * @ingroup iface_wl_surface
 * @struct wl_surface_interface
 */</doc>
<mbr r='wl_surface_interface::destroy' o='0' t='void (*)(struct wl_client *, struct wl_resource *)'/>
<mbr r='wl_surface_interface::attach' o='64' t='void (*)(struct wl_client *, struct wl_resource *, struct wl_resource *, int32_t, int32_t)'/>
<mbr r='wl_surface_interface::damage' o='128' t='void (*)(struct wl_client *, struct wl_resource *, int32_t, int32_t, int32_t, int32_t)'/>
<mbr r='wl_surface_interface::frame' o='192' t='void (*)(struct wl_client *, struct wl_resource *, uint32_t)'/>
<mbr r='wl_surface_interface::set_opaque_region' o='256' t='void (*)(struct wl_client *, struct wl_resource *, struct wl_resource *)'/>
<mbr r='wl_surface_interface::set_input_region' o='320' t='void (*)(struct wl_client *, struct wl_resource *, struct wl_resource *)'/>
<mbr r='wl_surface_interface::commit' o='384' t='void (*)(struct wl_client *, struct wl_resource *)'/>
<mbr r='wl_surface_interface::set_buffer_transform' o='448' t='void (*)(struct wl_client *, struct wl_resource *, int32_t)'/>
<mbr r='wl_surface_interface::set_buffer_scale' o='512' t='void (*)(struct wl_client *, struct wl_resource *, int32_t)'/>
<mbr r='wl_surface_interface::damage_buffer' o='576' t='void (*)(struct wl_client *, struct wl_resource *, int32_t, int32_t, int32_t, int32_t)'/>
<use f='WebKit/Source/WebKit/UIProcess/gtk/WaylandCompositor.cpp' l='309'/>
<use f='WebKit/Source/WebKit/UIProcess/gtk/WaylandCompositor.cpp' l='369' u='a'/>
<use f='WebKit/Source/WebKit/UIProcess/gtk/WaylandCompositor.cpp' l='369' u='a'/>
<size>80</size>
