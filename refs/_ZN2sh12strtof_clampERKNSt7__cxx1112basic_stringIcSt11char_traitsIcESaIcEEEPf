<dec f='WebKit/Source/ThirdParty/ANGLE/src/compiler/translator/util.h' l='50' type='bool sh::strtof_clamp(const std::string &amp; str, float * value)'/>
<doc f='WebKit/Source/ThirdParty/ANGLE/src/compiler/translator/util.h' l='44'>// strtof_clamp is like strtof but
//   1. it forces C locale, i.e. forcing &apos;.&apos; as decimal point.
//   2. it sets the value to infinity if overflow happens.
//   3. str should be guaranteed to be in the valid format for a floating point number as defined
//      by the grammar in the ESSL 3.00.6 spec section 4.1.4.
// Return false if overflow happens.</doc>
<use f='WebKit/Source/ThirdParty/ANGLE/src/compiler/translator/glslang_lex_autogen.cpp' l='3688' u='c' c='_ZL17floatsuffix_checkPN2sh13TParseContextE'/>
<use f='WebKit/Source/ThirdParty/ANGLE/src/compiler/translator/glslang_lex_autogen.cpp' l='3719' u='c' c='_ZL14float_constantPv'/>
<def f='WebKit/Source/ThirdParty/ANGLE/src/compiler/translator/util.cpp' l='187' ll='199' type='bool sh::strtof_clamp(const std::string &amp; str, float * value)'/>
