<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='417' u='c' c='_ZN3JSC12X86Assembler8push_i32Ei'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='507' u='c' c='_ZN3JSC12X86Assembler7addl_irEiNS_12X86Registers10RegisterIDE'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='1047' u='c' c='_ZN3JSC12X86Assembler6orl_irEiNS_12X86Registers10RegisterIDE'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='1245' u='c' c='_ZN3JSC12X86Assembler7subl_irEiNS_12X86Registers10RegisterIDE'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='1496' u='c' c='_ZN3JSC12X86Assembler7xorl_irEiNS_12X86Registers10RegisterIDE'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='1898' u='c' c='_ZN3JSC12X86Assembler7cmpl_irEiNS_12X86Registers10RegisterIDE'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='2073' u='c' c='_ZN3JSC12X86Assembler10testl_i32rEiNS_12X86Registers10RegisterIDE'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='2158' u='c' c='_ZN3JSC12X86Assembler9testb_i8rEiNS_12X86Registers10RegisterIDE'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='2253' u='c' c='_ZN3JSC12X86Assembler3cdqEv'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='2359' u='c' c='_ZN3JSC12X86Assembler9movl_mEAXEPKv'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='2476' u='c' c='_ZN3JSC12X86Assembler9movl_EAXmEPKv'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='2782' u='c' c='_ZN3JSC12X86Assembler4callEv'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='2799' u='c' c='_ZN3JSC12X86Assembler3jmpEv'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='3534' u='c' c='_ZN3JSC12X86Assembler4int3Ev'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='3545' u='c' c='_ZN3JSC12X86Assembler3retEv'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='3678' u='c' c='_ZN3JSC12X86Assembler5pauseEv'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='3721' u='c' c='_ZN3JSC12X86Assembler5alignEi'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='3960' u='c' c='_ZN3JSC12X86Assembler3nopEv'/>
<def f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='4330' ll='4334' type='void JSC::X86Assembler::X86InstructionFormatter::oneByteOp(JSC::X86Assembler::OneByteOpcodeID opcode)'/>
<doc f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/X86Assembler.h' l='4316'>// Word-sized operands / no operand instruction formatters.
        //
        // In addition to the opcode, the following operand permutations are supported:
        //   * None - instruction takes no operands.
        //   * One register - the low three bits of the RegisterID are added into the opcode.
        //   * Two registers - encode a register form ModRm (for all ModRm formats, the reg field is passed first, and a GroupOpcodeID may be passed in its place).
        //   * Three argument ModRM - a register, and a register and an offset describing a memory operand.
        //   * Five argument ModRM - a register, and a base register, an index, scale, and offset describing a memory operand.
        //
        // For 32-bit x86 targets, the address operand may also be provided as a void*.
        // On 64-bit targets REX prefixes will be planted as necessary, where high numbered registers are used.
        //
        // The twoByteOp methods plant two-byte Intel instructions sequences (first opcode byte 0x0F).</doc>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='417' u='c' c='_ZN3JSC12X86Assembler8push_i32Ei'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='507' u='c' c='_ZN3JSC12X86Assembler7addl_irEiNS_12X86Registers10RegisterIDE'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='1047' u='c' c='_ZN3JSC12X86Assembler6orl_irEiNS_12X86Registers10RegisterIDE'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='1245' u='c' c='_ZN3JSC12X86Assembler7subl_irEiNS_12X86Registers10RegisterIDE'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='1496' u='c' c='_ZN3JSC12X86Assembler7xorl_irEiNS_12X86Registers10RegisterIDE'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='1898' u='c' c='_ZN3JSC12X86Assembler7cmpl_irEiNS_12X86Registers10RegisterIDE'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='2073' u='c' c='_ZN3JSC12X86Assembler10testl_i32rEiNS_12X86Registers10RegisterIDE'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='2158' u='c' c='_ZN3JSC12X86Assembler9testb_i8rEiNS_12X86Registers10RegisterIDE'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='2253' u='c' c='_ZN3JSC12X86Assembler3cdqEv'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='2359' u='c' c='_ZN3JSC12X86Assembler9movl_mEAXEPKv'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='2476' u='c' c='_ZN3JSC12X86Assembler9movl_EAXmEPKv'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='2782' u='c' c='_ZN3JSC12X86Assembler4callEv'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='2799' u='c' c='_ZN3JSC12X86Assembler3jmpEv'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='3534' u='c' c='_ZN3JSC12X86Assembler4int3Ev'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='3545' u='c' c='_ZN3JSC12X86Assembler3retEv'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='3678' u='c' c='_ZN3JSC12X86Assembler5pauseEv'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='3721' u='c' c='_ZN3JSC12X86Assembler5alignEi'/>
<use f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='3960' u='c' c='_ZN3JSC12X86Assembler3nopEv'/>
<def f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='4330' ll='4334' type='void JSC::X86Assembler::X86InstructionFormatter::oneByteOp(JSC::X86Assembler::OneByteOpcodeID opcode)'/>
<doc f='WebKit/Source/JavaScriptCore/assembler/X86Assembler.h' l='4316'>// Word-sized operands / no operand instruction formatters.
        //
        // In addition to the opcode, the following operand permutations are supported:
        //   * None - instruction takes no operands.
        //   * One register - the low three bits of the RegisterID are added into the opcode.
        //   * Two registers - encode a register form ModRm (for all ModRm formats, the reg field is passed first, and a GroupOpcodeID may be passed in its place).
        //   * Three argument ModRM - a register, and a register and an offset describing a memory operand.
        //   * Five argument ModRM - a register, and a base register, an index, scale, and offset describing a memory operand.
        //
        // For 32-bit x86 targets, the address operand may also be provided as a void*.
        // On 64-bit targets REX prefixes will be planted as necessary, where high numbered registers are used.
        //
        // The twoByteOp methods plant two-byte Intel instructions sequences (first opcode byte 0x0F).</doc>
