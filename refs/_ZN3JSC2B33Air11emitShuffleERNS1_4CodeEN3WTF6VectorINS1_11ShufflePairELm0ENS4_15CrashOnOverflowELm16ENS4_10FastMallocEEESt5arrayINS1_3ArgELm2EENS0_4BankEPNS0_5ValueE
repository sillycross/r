<dec f='WebKit/Source/JavaScriptCore/b3/air/AirEmitShuffle.h' l='123' type='Vector&lt;JSC::B3::Air::Inst&gt; JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &amp; code, Vector&lt;JSC::B3::Air::ShufflePair&gt; , std::array&lt;Arg, 2&gt; scratch, JSC::B3::Bank , JSC::B3::Value * origin)'/>
<def f='WebKit/Source/JavaScriptCore/b3/air/AirEmitShuffle.cpp' l='126' ll='551' type='Vector&lt;JSC::B3::Air::Inst&gt; JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &amp; code, Vector&lt;JSC::B3::Air::ShufflePair&gt; pairs, std::array&lt;Arg, 2&gt; scratches, JSC::B3::Bank bank, JSC::B3::Value * origin)'/>
<use f='WebKit/Source/JavaScriptCore/b3/air/AirEmitShuffle.cpp' l='572' u='c' c='_ZN3JSC2B33Air11emitShuffleERNS1_4CodeERKN3WTF6VectorINS1_11ShufflePairELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEERKSt5arrayINS1_3ArgELm2EESG_PNS0_5ValueE'/>
<use f='WebKit/Source/JavaScriptCore/b3/air/AirEmitShuffle.cpp' l='573' u='c' c='_ZN3JSC2B33Air11emitShuffleERNS1_4CodeERKN3WTF6VectorINS1_11ShufflePairELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEERKSt5arrayINS1_3ArgELm2EESG_PNS0_5ValueE'/>
<doc f='WebKit/Source/JavaScriptCore/b3/air/AirEmitShuffle.h' l='92'>// Perform a shuffle of a given type. The scratch argument is mandatory. You should pass it as
// follows: If you know that you have scratch registers or temporaries available - that is, they&apos;re
// registers that are not mentioned in the shuffle, have the same type as the shuffle, and are not
// live at the shuffle - then you can pass them. If you don&apos;t have scratch registers available or if
// you don&apos;t feel like looking for them, you can pass memory locations. It&apos;s always safe to pass a
// pair of memory locations, and replacing either memory location with a register can be viewed as an
// optimization. It&apos;s a pretty important optimization. Some more notes:
//
// - We define scratch registers as things that are not live before the shuffle and are not one of
//   the destinations of the shuffle. Not being live before the shuffle also means that they cannot
//   be used for any of the sources of the shuffle.
//
// - A second scratch location is only needed when you have shuffle pairs where memory is used both
//   as source and destination.
//
// - You&apos;re guaranteed not to need any scratch locations if there is a Swap instruction available for
//   the type and you don&apos;t have any memory locations that are both the source and the destination of
//   some pairs. GP supports Swap on x86 while FP never supports Swap.
//
// - Passing memory locations as scratch if are running emitShuffle() before register allocation is
//   silly, since that will cause emitShuffle() to pick some specific registers when it does need
//   scratch. One easy way to avoid that predicament is to ensure that you call emitShuffle() after
//   register allocation. For this reason we could add a Shuffle instruction so that we can defer
//   shufflings until after regalloc.
//
// - Shuffles with memory=&gt;memory pairs are not very well tuned. You should avoid them if you want
//   performance. If you need to do them, then making sure that you reserve a temporary is one way to
//   get acceptable performance.
//
// NOTE: Use this method (and its friend below) to emit shuffles after register allocation. Before
// register allocation it is much better to simply use the Shuffle instruction.</doc>
