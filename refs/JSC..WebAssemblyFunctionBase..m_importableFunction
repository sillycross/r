<use f='WebKit/Source/JavaScriptCore/wasm/js/WebAssemblyFunctionBase.h' l='49' u='m' c='_ZNK3JSC23WebAssemblyFunctionBase14signatureIndexEv'/>
<use f='WebKit/Source/JavaScriptCore/wasm/js/WebAssemblyFunctionBase.h' l='50' u='m' c='_ZNK3JSC23WebAssemblyFunctionBase22entrypointLoadLocationEv'/>
<use f='WebKit/Source/JavaScriptCore/wasm/js/WebAssemblyFunctionBase.h' l='51' u='r' c='_ZNK3JSC23WebAssemblyFunctionBase18importableFunctionEv'/>
<use f='WebKit/Source/JavaScriptCore/wasm/js/WebAssemblyFunctionBase.h' l='55' u='a' c='_ZN3JSC23WebAssemblyFunctionBase22offsetOfSignatureIndexEv'/>
<use f='WebKit/Source/JavaScriptCore/wasm/js/WebAssemblyFunctionBase.h' l='57' u='a' c='_ZN3JSC23WebAssemblyFunctionBase30offsetOfEntrypointLoadLocationEv'/>
<dec f='WebKit/Source/JavaScriptCore/wasm/js/WebAssemblyFunctionBase.h' l='69' type='JSC::Wasm::WasmToWasmImportableFunction'/>
<offset>320</offset>
<doc f='WebKit/Source/JavaScriptCore/wasm/js/WebAssemblyFunctionBase.h' l='66'>// It&apos;s safe to just hold the raw WasmToWasmImportableFunction because we have a reference
    // to our Instance, which points to the CodeBlock, which points to the Module
    // that exported us, which ensures that the actual Signature/code doesn&apos;t get deallocated.</doc>
<use f='WebKit/Source/JavaScriptCore/wasm/js/WebAssemblyFunctionBase.cpp' l='42' u='w' c='_ZN3JSC23WebAssemblyFunctionBaseC1ERNS_2VMEPNS_16NativeExecutableEPNS_14JSGlobalObjectEPNS_9StructureENS_4Wasm28WasmToWasmImportableFunctionE'/>
