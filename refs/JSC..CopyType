<def f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSGenericTypedArrayView.h' l='87' ll='90'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSGenericTypedArrayView.h' l='215' c='_ZN3JSC23JSGenericTypedArrayView3setEPNS_14JSGlobalObjectEjPNS_8JSObjectEjjNS_8CopyTypeE'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSGenericTypedArrayView.h' l='322' c='_ZN3JSC23JSGenericTypedArrayView19setWithSpecificTypeEPNS_14JSGlobalObjectEjPNS_23JSGenericTypedArrayViewIT_EEjjNS_8CopyTypeE'/>
<doc f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSGenericTypedArrayView.h' l='46'>// A typed array view is our representation of a typed array object as seen
// from JavaScript. For example:
//
// var o = new Int8Array(100);
//
// Here, &apos;o&apos; points to a JSGenericTypedArrayView&lt;int8_t&gt;.
//
// Views contain five fields:
//
//     Structure* S     // from JSCell
//     Butterfly* B     // from JSObject
//     ElementType* V
//     uint32_t L
//     TypedArrayMode M
//
// These fields take up a total of four pointer-width words. FIXME: Make
// it take less words!
//
// B is usually unused but may stored some additional &quot;overflow&quot; data for
// one of the modes. V always points to the base of the typed array&apos;s data,
// and may point to either GC-managed copied space, or data in the C heap;
// which of those things it points to is governed by the mode although for
// simple accesses to the view you can just read from the pointer either
// way. M specifies the mode of the view. L is the length, in units that
// depend on the view&apos;s type.

// The JSGenericTypedArrayView is templatized by an Adaptor that controls
// the element type and how it&apos;s converted; it should obey the following
// interface; I use int8_t as an example:
//
// struct Adaptor {
//     typedef int8_t Type;
//     typedef Int8Array ViewType;
//     typedef JSInt8Array JSViewType;
//     static int8_t toNativeFromInt32(int32_t);
//     static int8_t toNativeFromUint32(uint32_t);
//     static int8_t toNativeFromDouble(double);
//     static JSValue toJSValue(int8_t);
//     template&lt;T&gt; static T::Type convertTo(uint8_t);
// };</doc>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSGenericTypedArrayViewInlines.h' l='163' c='_ZN3JSC23JSGenericTypedArrayView19setWithSpecificTypeEPNS_14JSGlobalObjectEjPNS_23JSGenericTypedArrayViewIT_EEjjNS_8CopyTypeE'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSGenericTypedArrayViewInlines.h' l='253' c='_ZN3JSC23JSGenericTypedArrayView3setEPNS_14JSGlobalObjectEjPNS_8JSObjectEjjNS_8CopyTypeE'/>
<def f='WebKit/Source/JavaScriptCore/runtime/JSGenericTypedArrayView.h' l='87' ll='90'/>
<use f='WebKit/Source/JavaScriptCore/runtime/JSGenericTypedArrayView.h' l='215' c='_ZN3JSC23JSGenericTypedArrayView3setEPNS_14JSGlobalObjectEjPNS_8JSObjectEjjNS_8CopyTypeE'/>
<use f='WebKit/Source/JavaScriptCore/runtime/JSGenericTypedArrayView.h' l='322' c='_ZN3JSC23JSGenericTypedArrayView19setWithSpecificTypeEPNS_14JSGlobalObjectEjPNS_23JSGenericTypedArrayViewIT_EEjjNS_8CopyTypeE'/>
<doc f='WebKit/Source/JavaScriptCore/runtime/JSGenericTypedArrayView.h' l='46'>// A typed array view is our representation of a typed array object as seen
// from JavaScript. For example:
//
// var o = new Int8Array(100);
//
// Here, &apos;o&apos; points to a JSGenericTypedArrayView&lt;int8_t&gt;.
//
// Views contain five fields:
//
//     Structure* S     // from JSCell
//     Butterfly* B     // from JSObject
//     ElementType* V
//     uint32_t L
//     TypedArrayMode M
//
// These fields take up a total of four pointer-width words. FIXME: Make
// it take less words!
//
// B is usually unused but may stored some additional &quot;overflow&quot; data for
// one of the modes. V always points to the base of the typed array&apos;s data,
// and may point to either GC-managed copied space, or data in the C heap;
// which of those things it points to is governed by the mode although for
// simple accesses to the view you can just read from the pointer either
// way. M specifies the mode of the view. L is the length, in units that
// depend on the view&apos;s type.

// The JSGenericTypedArrayView is templatized by an Adaptor that controls
// the element type and how it&apos;s converted; it should obey the following
// interface; I use int8_t as an example:
//
// struct Adaptor {
//     typedef int8_t Type;
//     typedef Int8Array ViewType;
//     typedef JSInt8Array JSViewType;
//     static int8_t toNativeFromInt32(int32_t);
//     static int8_t toNativeFromUint32(uint32_t);
//     static int8_t toNativeFromDouble(double);
//     static JSValue toJSValue(int8_t);
//     template&lt;T&gt; static T::Type convertTo(uint8_t);
// };</doc>
<use f='WebKit/Source/JavaScriptCore/runtime/JSGenericTypedArrayViewInlines.h' l='163' c='_ZN3JSC23JSGenericTypedArrayView19setWithSpecificTypeEPNS_14JSGlobalObjectEjPNS_23JSGenericTypedArrayViewIT_EEjjNS_8CopyTypeE'/>
<use f='WebKit/Source/JavaScriptCore/runtime/JSGenericTypedArrayViewInlines.h' l='253' c='_ZN3JSC23JSGenericTypedArrayView3setEPNS_14JSGlobalObjectEjPNS_8JSObjectEjjNS_8CopyTypeE'/>
