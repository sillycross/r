<dec f='WebKit/Source/ThirdParty/ANGLE/src/common/third_party/base/anglebase/numerics/safe_math.h' l='255'/>
<use f='WebKit/Source/ThirdParty/ANGLE/src/common/third_party/base/anglebase/numerics/safe_math.h' l='318' u='c'/>
<use f='WebKit/Source/ThirdParty/ANGLE/src/common/third_party/base/anglebase/numerics/safe_math.h' l='319' u='c'/>
<use f='WebKit/Source/ThirdParty/ANGLE/src/common/third_party/base/anglebase/numerics/safe_math.h' l='320' u='c'/>
<use f='WebKit/Source/ThirdParty/ANGLE/src/common/third_party/base/anglebase/numerics/safe_math.h' l='321' u='c'/>
<use f='WebKit/Source/ThirdParty/ANGLE/src/common/third_party/base/anglebase/numerics/safe_math.h' l='322' u='c'/>
<use f='WebKit/Source/ThirdParty/ANGLE/src/common/third_party/base/anglebase/numerics/safe_math.h' l='324' u='w'/>
<doc f='WebKit/Source/ThirdParty/ANGLE/src/common/third_party/base/anglebase/numerics/safe_math.h' l='248'>// This is the boilerplate for the standard arithmetic operator overloads. A
// macro isn&apos;t the prettiest solution, but it beats rewriting these five times.
// Some details worth noting are:
//  * We apply the standard arithmetic promotions.
//  * We skip range checks for floating points.
//  * We skip range checks for destination integers with sufficient range.
// TODO(jschuh): extract these out into templates.</doc>
