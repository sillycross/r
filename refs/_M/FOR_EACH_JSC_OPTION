<dec f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/OptionsList.h' l='80'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/OptionsList.h' l='612' u='c'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/OptionsList.h' l='667' u='c'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/Options.h' l='63' u='c'/>
<use f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/Options.h' l='132' u='c'/>
<doc f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/OptionsList.h' l='48'>// How do JSC VM options work?
// ===========================
// The FOR_EACH_JSC_OPTION() macro below defines a list of all JSC options in use,
// along with their types and default values. The options values are actually
// realized as fields in OptionsStorage embedded in JSC::Config.
//
//     Options::initialize() will initialize the option values with the defaults
// specified in FOR_EACH_JSC_OPTION() below. After that, the values can be
// programmatically read and written to using an accessor method with the same
// name as the option. For example, the option &quot;useJIT&quot; can be read and set like
// so:
//
//     bool jitIsOn = Options::useJIT();  // Get the option value.
//     Options::useJIT() = false;         // Sets the option value.
//
//     If you want to tweak any of these values programmatically for testing
// purposes, you can do so in Options::initialize() after the default values
// are set.
//
//     Alternatively, you can override the default values by specifying
// environment variables of the form: JSC_&lt;name of JSC option&gt;.
//
// Note: Options::initialize() tries to ensure some sanity on the option values
// which are set by doing some range checks, and value corrections. These
// checks are done after the option values are set. If you alter the option
// values after the sanity checks (for your own testing), then you&apos;re liable to
// ensure that the new values set are sane and reasonable for your own run.
//
// Any modifications to options must be done before the first VM is instantiated.
// On instantiation of the first VM instance, the Options will be write protected
// and cannot be modified thereafter.</doc>
<dec f='WebKit/Source/JavaScriptCore/runtime/OptionsList.h' l='80'/>
<use f='WebKit/Source/JavaScriptCore/runtime/OptionsList.h' l='612' u='c'/>
<use f='WebKit/Source/JavaScriptCore/runtime/OptionsList.h' l='667' u='c'/>
<use f='WebKit/Source/JavaScriptCore/runtime/Options.h' l='63' u='c'/>
<use f='WebKit/Source/JavaScriptCore/runtime/Options.h' l='132' u='c'/>
<doc f='WebKit/Source/JavaScriptCore/runtime/OptionsList.h' l='48'>// How do JSC VM options work?
// ===========================
// The FOR_EACH_JSC_OPTION() macro below defines a list of all JSC options in use,
// along with their types and default values. The options values are actually
// realized as fields in OptionsStorage embedded in JSC::Config.
//
//     Options::initialize() will initialize the option values with the defaults
// specified in FOR_EACH_JSC_OPTION() below. After that, the values can be
// programmatically read and written to using an accessor method with the same
// name as the option. For example, the option &quot;useJIT&quot; can be read and set like
// so:
//
//     bool jitIsOn = Options::useJIT();  // Get the option value.
//     Options::useJIT() = false;         // Sets the option value.
//
//     If you want to tweak any of these values programmatically for testing
// purposes, you can do so in Options::initialize() after the default values
// are set.
//
//     Alternatively, you can override the default values by specifying
// environment variables of the form: JSC_&lt;name of JSC option&gt;.
//
// Note: Options::initialize() tries to ensure some sanity on the option values
// which are set by doing some range checks, and value corrections. These
// checks are done after the option values are set. If you alter the option
// values after the sanity checks (for your own testing), then you&apos;re liable to
// ensure that the new values set are sane and reasonable for your own run.
//
// Any modifications to options must be done before the first VM is instantiated.
// On instantiation of the first VM instance, the Options will be write protected
// and cannot be modified thereafter.</doc>
<use f='WebKit/Source/JavaScriptCore/runtime/Options.cpp' l='313' u='c'/>
<use f='WebKit/Source/JavaScriptCore/runtime/Options.cpp' l='627' u='c'/>
<use f='WebKit/Source/JavaScriptCore/runtime/Options.cpp' l='651' u='c'/>
<use f='WebKit/Source/JavaScriptCore/runtime/Options.cpp' l='866' u='c'/>
<use f='WebKit/Source/JavaScriptCore/API/glib/JSCOptions.cpp' l='179' u='c'/>
<use f='WebKit/Source/JavaScriptCore/API/glib/JSCOptions.cpp' l='195' u='c'/>
<use f='WebKit/Source/JavaScriptCore/API/glib/JSCOptions.cpp' l='627' u='c'/>
<use f='WebKit/Source/JavaScriptCore/API/glib/JSCOptions.cpp' l='681' u='c'/>
<use f='WebKit/Source/JavaScriptCore/jsc.cpp' l='2232' u='c'/>
