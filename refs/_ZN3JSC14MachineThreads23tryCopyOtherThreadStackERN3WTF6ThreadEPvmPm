<dec f='WebKit/Source/JavaScriptCore/heap/MachineStackMarker.h' l='59' type='void JSC::MachineThreads::tryCopyOtherThreadStack(WTF::Thread &amp; , void * , size_t capacity, size_t * )'/>
<def f='WebKit/Source/JavaScriptCore/heap/MachineStackMarker.cpp' l='108' ll='132' type='void JSC::MachineThreads::tryCopyOtherThreadStack(WTF::Thread &amp; thread, void * buffer, size_t capacity, size_t * size)'/>
<use f='WebKit/Source/JavaScriptCore/heap/MachineStackMarker.cpp' l='173' u='c' c='_ZN3JSC14MachineThreads24tryCopyOtherThreadStacksERKN3WTF14AbstractLockerEPvmPmRNS1_6ThreadE'/>
<doc f='WebKit/Source/JavaScriptCore/heap/MachineStackMarker.cpp' l='99'>// This function must not call malloc(), free(), or any other function that might
// acquire a lock. Since &apos;thread&apos; is suspended, trying to acquire a lock
// will deadlock if &apos;thread&apos; holds that lock.
// This function, specifically the memory copying, was causing problems with Address Sanitizer in
// apps. Since we cannot disallow the system memcpy we must use our own naive implementation,
// copyMemory, for ASan to work on either instrumented or non-instrumented builds. This is not a
// significant performance loss as tryCopyOtherThreadStack is only called as part of an O(heapsize)
// operation. As the heap is generally much larger than the stack the performance hit is minimal.
// See: https://bugs.webkit.org/show_bug.cgi?id=146297</doc>
<dec f='WebKit/JavaScriptCore/PrivateHeaders/JavaScriptCore/MachineStackMarker.h' l='59' type='void JSC::MachineThreads::tryCopyOtherThreadStack(WTF::Thread &amp; , void * , size_t capacity, size_t * )'/>
