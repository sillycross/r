<use f='include/gstreamer-1.0/gst/base/gstbasesink.h' l='62'/>
<def f='include/gstreamer-1.0/gst/base/gstbasesink.h' l='151' ll='203'/>
<size>792</size>
<doc f='include/gstreamer-1.0/gst/base/gstbasesink.h' l='108'>/**
 * GstBaseSinkClass:
 * @parent_class: Element parent class
 * @get_caps: Called to get sink pad caps from the subclass
 * @set_caps: Notify subclass of changed caps
 * @fixate: Only useful in pull mode. Implement if you have
 *     ideas about what should be the default values for the caps you support.
 * @activate_pull: Subclasses should override this when they can provide an
 *     alternate method of spawning a thread to drive the pipeline in pull mode.
 *     Should start or stop the pulling thread, depending on the value of the
 *     &quot;active&quot; argument. Called after actually activating the sink pad in pull
 *     mode. The default implementation starts a task on the sink pad.
 * @get_times: Called to get the start and end times for synchronising
 *     the passed buffer to the clock
 * @propose_allocation: configure the allocation query
 * @start: Start processing. Ideal for opening resources in the subclass
 * @stop: Stop processing. Subclasses should use this to close resources.
 * @unlock: Unlock any pending access to the resource. Subclasses should
 *     unblock any blocked function ASAP and call gst_base_sink_wait_preroll()
 * @unlock_stop: Clear the previous unlock request. Subclasses should clear
 *     any state they set during #GstBaseSinkClass.unlock(), and be ready to
 *     continue where they left off after gst_base_sink_wait_preroll(),
 *     gst_base_sink_wait() or gst_wait_sink_wait_clock() return or
 *     #GstBaseSinkClass.render() is called again.
 * @query: perform a #GstQuery on the element.
 * @event: Override this to handle events arriving on the sink pad
 * @wait_event: Override this to implement custom logic to wait for the event
 *     time (for events like EOS and GAP). Subclasses should always first
 *     chain up to the default implementation.
 * @prepare: Called to prepare the buffer for @render and @preroll. This
 *     function is called before synchronisation is performed.
 * @prepare_list: Called to prepare the buffer list for @render_list. This
 *     function is called before synchronisation is performed.
 * @preroll: Called to present the preroll buffer if desired.
 * @render: Called when a buffer should be presented or output, at the
 *     correct moment if the #GstBaseSink has been set to sync to the clock.
 * @render_list: Same as @render but used with buffer lists instead of
 *     buffers.
 *
 * Subclasses can override any of the available virtual methods or not, as
 * needed. At the minimum, the @render method should be overridden to
 * output/present buffers.
 */</doc>
<mbr r='_GstBaseSinkClass::parent_class' o='0' t='GstElementClass'/>
<mbr r='_GstBaseSinkClass::get_caps' o='3904' t='GstCaps *(*)(GstBaseSink *, GstCaps *)'/>
<mbr r='_GstBaseSinkClass::set_caps' o='3968' t='gboolean (*)(GstBaseSink *, GstCaps *)'/>
<mbr r='_GstBaseSinkClass::fixate' o='4032' t='GstCaps *(*)(GstBaseSink *, GstCaps *)'/>
<mbr r='_GstBaseSinkClass::activate_pull' o='4096' t='gboolean (*)(GstBaseSink *, gboolean)'/>
<mbr r='_GstBaseSinkClass::get_times' o='4160' t='void (*)(GstBaseSink *, GstBuffer *, GstClockTime *, GstClockTime *)'/>
<mbr r='_GstBaseSinkClass::propose_allocation' o='4224' t='gboolean (*)(GstBaseSink *, GstQuery *)'/>
<mbr r='_GstBaseSinkClass::start' o='4288' t='gboolean (*)(GstBaseSink *)'/>
<mbr r='_GstBaseSinkClass::stop' o='4352' t='gboolean (*)(GstBaseSink *)'/>
<mbr r='_GstBaseSinkClass::unlock' o='4416' t='gboolean (*)(GstBaseSink *)'/>
<mbr r='_GstBaseSinkClass::unlock_stop' o='4480' t='gboolean (*)(GstBaseSink *)'/>
<mbr r='_GstBaseSinkClass::query' o='4544' t='gboolean (*)(GstBaseSink *, GstQuery *)'/>
<mbr r='_GstBaseSinkClass::event' o='4608' t='gboolean (*)(GstBaseSink *, GstEvent *)'/>
<mbr r='_GstBaseSinkClass::wait_event' o='4672' t='GstFlowReturn (*)(GstBaseSink *, GstEvent *)'/>
<mbr r='_GstBaseSinkClass::prepare' o='4736' t='GstFlowReturn (*)(GstBaseSink *, GstBuffer *)'/>
<mbr r='_GstBaseSinkClass::prepare_list' o='4800' t='GstFlowReturn (*)(GstBaseSink *, GstBufferList *)'/>
<mbr r='_GstBaseSinkClass::preroll' o='4864' t='GstFlowReturn (*)(GstBaseSink *, GstBuffer *)'/>
<mbr r='_GstBaseSinkClass::render' o='4928' t='GstFlowReturn (*)(GstBaseSink *, GstBuffer *)'/>
<mbr r='_GstBaseSinkClass::render_list' o='4992' t='GstFlowReturn (*)(GstBaseSink *, GstBufferList *)'/>
<mbr r='_GstBaseSinkClass::_gst_reserved' o='5056' t='gpointer [20]'/>
