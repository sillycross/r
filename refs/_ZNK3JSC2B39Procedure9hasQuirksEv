<def f='WebKit/Source/JavaScriptCore/b3/B3Procedure.h' l='223' type='bool JSC::B3::Procedure::hasQuirks() const'/>
<doc f='WebKit/Source/JavaScriptCore/b3/B3Procedure.h' l='215'>// Some operations are specified in B3 IR to behave one way but on this given CPU they behave a
    // different way. When true, those B3 IR ops switch to behaving the CPU way, and the optimizer may
    // start taking advantage of it.
    //
    // One way to think of it is like this. Imagine that you find that the cleanest way of lowering
    // something in lowerMacros is to unconditionally replace one opcode with another. This is a shortcut
    // where you instead keep the same opcode, but rely on the opcode&apos;s meaning changes once lowerMacros
    // sets hasQuirks.</doc>
<use f='WebKit/Source/JavaScriptCore/b3/B3LowerMacros.cpp' l='69' u='c' c='_ZN3JSC2B312_GLOBAL__N_111LowerMacros3runEv'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3Procedure.cpp' l='247' u='c' c='_ZNK3JSC2B39Procedure4dumpERN3WTF11PrintStreamE'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3ReduceStrength.cpp' l='1689' u='c' c='_ZN3JSC2B312_GLOBAL__N_114ReduceStrength19reduceValueStrengthEv'/>
<use f='WebKit/Source/JavaScriptCore/b3/B3ReduceStrength.cpp' l='1747' u='c' c='_ZN3JSC2B312_GLOBAL__N_114ReduceStrength19reduceValueStrengthEv'/>
