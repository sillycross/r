<use f='include/gtk-3.0/gtk/gtkwidget.h' l='67'/>
<def f='include/gtk-3.0/gtk/gtkwidget.h' l='362' ll='609'/>
<size>824</size>
<doc f='include/gtk-3.0/gtk/gtkwidget.h' l='142'>/**
 * GtkWidgetClass:
 * @parent_class: The object class structure needs to be the first
 *   element in the widget class structure in order for the class mechanism
 *   to work correctly. This allows a GtkWidgetClass pointer to be cast to
 *   a GObjectClass pointer.
 * @activate_signal: The signal to emit when a widget of this class is
 *   activated, gtk_widget_activate() handles the emission.
 *   Implementation of this signal is optional.
 * @dispatch_child_properties_changed: Seldomly overidden.
 * @destroy: Signals that all holders of a reference to the widget
 *   should release the reference that they hold.
 * @show: Signal emitted when widget is shown
 * @show_all: Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 * @hide: Signal emitted when widget is hidden.
 * @map: Signal emitted when widget is going to be mapped, that is
 *   when the widget is visible (which is controlled with
 *   gtk_widget_set_visible()) and all its parents up to the toplevel
 *   widget are also visible.
 * @unmap: Signal emitted when widget is going to be unmapped, which
 *   means that either it or any of its parents up to the toplevel
 *   widget have been set as hidden.
 * @realize: Signal emitted when widget is associated with a
 *   #GdkWindow, which means that gtk_widget_realize() has been called or
 *   the widget has been mapped (that is, it is going to be drawn).
 * @unrealize: Signal emitted when the GdkWindow associated with
 *   widget is destroyed, which means that gtk_widget_unrealize() has
 *   been called or the widget has been unmapped (that is, it is going
 *   to be hidden).
 * @size_allocate: Signal emitted to get the widget allocation.
 * @state_changed: Signal emitted when the widget state
 *   changes. Deprecated: 3.0
 * @state_flags_changed: Signal emitted when the widget state changes,
 *   see gtk_widget_get_state_flags().
 * @parent_set: Signal emitted when a new parent has been set on a
 *   widget.
 * @hierarchy_changed: Signal emitted when the anchored state of a
 *   widget changes.
 * @style_set: Signal emitted when a new style has been set on a
 * widget. Deprecated: 3.0
 * @direction_changed: Signal emitted when the text direction of a
 *   widget changes.
 * @grab_notify: Signal emitted when a widget becomes shadowed by a
 *   GTK+ grab (not a pointer or keyboard grab) on another widget, or
 *   when it becomes unshadowed due to a grab being removed.
 * @child_notify: Signal emitted for each child property that has
 *   changed on an object.
 * @draw: Signal emitted when a widget is supposed to render itself.
 * @get_request_mode: This allows a widget to tell its parent container whether
 *   it prefers to be allocated in %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH or
 *   %GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT mode.
 *   %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH means the widget prefers to have
 *   #GtkWidgetClass.get_preferred_width() called and then
 *   #GtkWidgetClass.get_preferred_height_for_width().
 *   %GTK_SIZE_REQUEST_CONSTANT_SIZE disables any height-for-width or
 *   width-for-height geometry management for a said widget and is the
 *   default return.
 *   It’s important to note (as described below) that any widget
 *   which trades height-for-width or width-for-height must respond properly 
 *   to both of the virtual methods #GtkWidgetClass.get_preferred_height_for_width()
 *   and #GtkWidgetClass.get_preferred_width_for_height() since it might be 
 *   queried in either #GtkSizeRequestMode by its parent container.
 * @get_preferred_height: This is called by containers to obtain the minimum
 *   and natural height of a widget. A widget that does not actually trade
 *   any height for width or width for height only has to implement these
 *   two virtual methods (#GtkWidgetClass.get_preferred_width() and
 *   #GtkWidgetClass.get_preferred_height()).
 * @get_preferred_width_for_height: This is analogous to
 *   #GtkWidgetClass.get_preferred_height_for_width() except that it
 *   operates in the oposite orientation. It’s rare that a widget actually
 *   does %GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT requests but this can happen
 *   when, for example, a widget or container gets additional columns to
 *   compensate for a smaller allocated height.
 * @get_preferred_width: This is called by containers to obtain the minimum
 *   and natural width of a widget. A widget will never be allocated a width
 *   less than its minimum and will only ever be allocated a width greater
 *   than the natural width once all of the said widget’s siblings have
 *   received their natural widths.
 *   Furthermore, a widget will only ever be allocated a width greater than
 *   its natural width if it was configured to receive extra expand space
 *   from its parent container.
 * @get_preferred_height_for_width: This is similar to
 *   #GtkWidgetClass.get_preferred_height() except that it is passed a
 *   contextual width to request height for. By implementing this virtual
 *   method it is possible for a #GtkLabel to tell its parent how much height
 *   would be required if the label were to be allocated a said width.
 * @mnemonic_activate: Activates the @widget if @group_cycling is
 *   %FALSE, and just grabs the focus if @group_cycling is %TRUE.
 * @grab_focus: Causes @widget to have the keyboard focus for the
 *   #GtkWindow it’s inside.
 * @focus:
 * @move_focus: Signal emitted when a change of focus is requested
 * @keynav_failed: Signal emitted if keyboard navigation fails.
 * @event: The GTK+ main loop will emit three signals for each GDK
 *   event delivered to a widget: one generic ::event signal, another,
 *   more specific, signal that matches the type of event delivered
 *   (e.g. &quot;key-press-event&quot;) and finally a generic &quot;event-after&quot;
 *   signal.
 * @button_press_event: Signal will be emitted when a button
 *   (typically from a mouse) is pressed.
 * @button_release_event: Signal will be emitted when a button
 *   (typically from a mouse) is released.
 * @scroll_event: Signal emitted when a button in the 4 to 7 range is
 *   pressed.
 * @motion_notify_event: Signal emitted when the pointer moves over
 *   the widget’s #GdkWindow.
 * @delete_event: Signal emitted if a user requests that a toplevel
 *   window is closed.
 * @destroy_event: Signal is emitted when a #GdkWindow is destroyed.
 * @key_press_event: Signal emitted when a key is pressed.
 * @key_release_event: Signal is emitted when a key is released.
 * @enter_notify_event: Signal event will be emitted when the pointer
 *   enters the widget’s window.
 * @leave_notify_event: Will be emitted when the pointer leaves the
 *   widget’s window.
 * @configure_event: Signal will be emitted when the size, position or
 *   stacking of the widget’s window has changed.
 * @focus_in_event: Signal emitted when the keyboard focus enters the
 * widget’s window.
 * @focus_out_event: Signal emitted when the keyboard focus leaves the
 * widget’s window.
 * @map_event: Signal emitted when the widget’s window is mapped.
 * @unmap_event: Signal will be emitted when the widget’s window is
 *   unmapped.
 * @property_notify_event: Signal will be emitted when a property on
 *   the widget’s window has been changed or deleted.
 * @selection_clear_event: Signal will be emitted when the the
 *   widget’s window has lost ownership of a selection.
 * @selection_request_event: Signal will be emitted when another
 *   client requests ownership of the selection owned by the widget&apos;s
 *   window.
 * @selection_notify_event:
 * @proximity_in_event:
 * @proximity_out_event:
 * @visibility_notify_event: Signal emitted when the widget’s window is
 *   obscured or unobscured.
 * @window_state_event: Signal emitted when the state of the toplevel
 *   window associated to the widget changes.
 * @damage_event: Signal emitted when a redirected window belonging to
 *   widget gets drawn into.
 * @grab_broken_event: Signal emitted when a pointer or keyboard grab
 *   on a window belonging to widget gets broken.
 * @selection_get:
 * @selection_received:
 * @drag_begin: Signal emitted on the drag source when a drag is
 *   started.
 * @drag_end: Signal emitted on the drag source when a drag is
 *   finished.
 * @drag_data_get: Signal emitted on the drag source when the drop
 *   site requests the data which is dragged.
 * @drag_data_delete: Signal emitted on the drag source when a drag
 *   with the action %GDK_ACTION_MOVE is successfully completed.
 * @drag_leave: Signal emitted on the drop site when the cursor leaves
 *   the widget.
 * @drag_motion: signal emitted on the drop site when the user moves
 *   the cursor over the widget during a drag.
 * @drag_drop: Signal emitted on the drop site when the user drops the
 *   data onto the widget.
 * @drag_data_received: Signal emitted on the drop site when the
 *   dragged data has been received.
 * @drag_failed: Signal emitted on the drag source when a drag has
 *   failed.
 * @popup_menu: Signal emitted whenever a widget should pop up a
 *   context menu.
 * @show_help:
 * @get_accessible: Returns the accessible object that describes the
 *   widget to an assistive technology.
 * @screen_changed: Signal emitted when the screen of a widget has
 *   changed.
 * @can_activate_accel: Signal allows applications and derived widgets
 *   to override the default GtkWidget handling for determining whether
 *   an accelerator can be activated.
 * @composited_changed: Signal emitted when the composited status of
 *   widgets screen changes. See gdk_screen_is_composited().
 * @query_tooltip: Signal emitted when “has-tooltip” is %TRUE and the
 *   hover timeout has expired with the cursor hovering “above”
 *   widget; or emitted when widget got focus in keyboard mode.
 * @compute_expand: Computes whether a container should give this
 *   widget extra space when possible.
 * @adjust_size_request: Convert an initial size request from a widget&apos;s
 *   #GtkSizeRequestMode virtual method implementations into a size request to
 *   be used by parent containers in laying out the widget.
 *   adjust_size_request adjusts from a child widget&apos;s
 *   original request to what a parent container should
 *   use for layout. The @for_size argument will be -1 if the request should
 *   not be for a particular size in the opposing orientation, i.e. if the
 *   request is not height-for-width or width-for-height. If @for_size is
 *   greater than -1, it is the proposed allocation in the opposing
 *   orientation that we need the request for. Implementations of
 *   adjust_size_request should chain up to the default implementation,
 *   which applies #GtkWidget’s margin properties and imposes any values
 *   from gtk_widget_set_size_request(). Chaining up should be last,
 *   after your subclass adjusts the request, so
 *   #GtkWidget can apply constraints and add the margin properly.
 * @adjust_size_allocation: Convert an initial size allocation assigned
 *   by a #GtkContainer using gtk_widget_size_allocate(), into an actual
 *   size allocation to be used by the widget. adjust_size_allocation
 *   adjusts to a child widget’s actual allocation
 *   from what a parent container computed for the
 *   child. The adjusted allocation must be entirely within the original
 *   allocation. In any custom implementation, chain up to the default
 *   #GtkWidget implementation of this method, which applies the margin
 *   and alignment properties of #GtkWidget. Chain up
 *   before performing your own adjustments so your
 *   own adjustments remove more allocation after the #GtkWidget base
 *   class has already removed margin and alignment. The natural size
 *   passed in should be adjusted in the same way as the allocated size,
 *   which allows adjustments to perform alignments or other changes
 *   based on natural size.
 * @style_updated: Signal emitted when the GtkStyleContext of a widget
 *   is changed.
 * @touch_event: Signal emitted when a touch event happens
 * @get_preferred_height_and_baseline_for_width:
 * @adjust_baseline_request:
 * @adjust_baseline_allocation:
 * @queue_draw_region: Invalidates the area of widget defined by
 *   region by calling gdk_window_invalidate_region() on the widget&apos;s
 *   window and all its child windows.
 */</doc>
<mbr r='_GtkWidgetClass::parent_class' o='0' t='GInitiallyUnownedClass'/>
<mbr r='_GtkWidgetClass::activate_signal' o='1088' t='guint'/>
<mbr r='_GtkWidgetClass::dispatch_child_properties_changed' o='1152' t='void (*)(GtkWidget *, guint, GParamSpec **)'/>
<mbr r='_GtkWidgetClass::destroy' o='1216' t='void (*)(GtkWidget *)'/>
<mbr r='_GtkWidgetClass::show' o='1280' t='void (*)(GtkWidget *)'/>
<mbr r='_GtkWidgetClass::show_all' o='1344' t='void (*)(GtkWidget *)'/>
<mbr r='_GtkWidgetClass::hide' o='1408' t='void (*)(GtkWidget *)'/>
<mbr r='_GtkWidgetClass::map' o='1472' t='void (*)(GtkWidget *)'/>
<mbr r='_GtkWidgetClass::unmap' o='1536' t='void (*)(GtkWidget *)'/>
<mbr r='_GtkWidgetClass::realize' o='1600' t='void (*)(GtkWidget *)'/>
<mbr r='_GtkWidgetClass::unrealize' o='1664' t='void (*)(GtkWidget *)'/>
<mbr r='_GtkWidgetClass::size_allocate' o='1728' t='void (*)(GtkWidget *, GtkAllocation *)'/>
<mbr r='_GtkWidgetClass::state_changed' o='1792' t='void (*)(GtkWidget *, GtkStateType)'/>
<mbr r='_GtkWidgetClass::state_flags_changed' o='1856' t='void (*)(GtkWidget *, GtkStateFlags)'/>
<mbr r='_GtkWidgetClass::parent_set' o='1920' t='void (*)(GtkWidget *, GtkWidget *)'/>
<mbr r='_GtkWidgetClass::hierarchy_changed' o='1984' t='void (*)(GtkWidget *, GtkWidget *)'/>
<mbr r='_GtkWidgetClass::style_set' o='2048' t='void (*)(GtkWidget *, GtkStyle *)'/>
<mbr r='_GtkWidgetClass::direction_changed' o='2112' t='void (*)(GtkWidget *, GtkTextDirection)'/>
<mbr r='_GtkWidgetClass::grab_notify' o='2176' t='void (*)(GtkWidget *, gboolean)'/>
<mbr r='_GtkWidgetClass::child_notify' o='2240' t='void (*)(GtkWidget *, GParamSpec *)'/>
<mbr r='_GtkWidgetClass::draw' o='2304' t='gboolean (*)(GtkWidget *, cairo_t *)'/>
<mbr r='_GtkWidgetClass::get_request_mode' o='2368' t='GtkSizeRequestMode (*)(GtkWidget *)'/>
<mbr r='_GtkWidgetClass::get_preferred_height' o='2432' t='void (*)(GtkWidget *, gint *, gint *)'/>
<mbr r='_GtkWidgetClass::get_preferred_width_for_height' o='2496' t='void (*)(GtkWidget *, gint, gint *, gint *)'/>
<mbr r='_GtkWidgetClass::get_preferred_width' o='2560' t='void (*)(GtkWidget *, gint *, gint *)'/>
<mbr r='_GtkWidgetClass::get_preferred_height_for_width' o='2624' t='void (*)(GtkWidget *, gint, gint *, gint *)'/>
<mbr r='_GtkWidgetClass::mnemonic_activate' o='2688' t='gboolean (*)(GtkWidget *, gboolean)'/>
<mbr r='_GtkWidgetClass::grab_focus' o='2752' t='void (*)(GtkWidget *)'/>
<mbr r='_GtkWidgetClass::focus' o='2816' t='gboolean (*)(GtkWidget *, GtkDirectionType)'/>
<mbr r='_GtkWidgetClass::move_focus' o='2880' t='void (*)(GtkWidget *, GtkDirectionType)'/>
<mbr r='_GtkWidgetClass::keynav_failed' o='2944' t='gboolean (*)(GtkWidget *, GtkDirectionType)'/>
<mbr r='_GtkWidgetClass::event' o='3008' t='gboolean (*)(GtkWidget *, GdkEvent *)'/>
<mbr r='_GtkWidgetClass::button_press_event' o='3072' t='gboolean (*)(GtkWidget *, GdkEventButton *)'/>
<mbr r='_GtkWidgetClass::button_release_event' o='3136' t='gboolean (*)(GtkWidget *, GdkEventButton *)'/>
<mbr r='_GtkWidgetClass::scroll_event' o='3200' t='gboolean (*)(GtkWidget *, GdkEventScroll *)'/>
<mbr r='_GtkWidgetClass::motion_notify_event' o='3264' t='gboolean (*)(GtkWidget *, GdkEventMotion *)'/>
<mbr r='_GtkWidgetClass::delete_event' o='3328' t='gboolean (*)(GtkWidget *, GdkEventAny *)'/>
<mbr r='_GtkWidgetClass::destroy_event' o='3392' t='gboolean (*)(GtkWidget *, GdkEventAny *)'/>
<mbr r='_GtkWidgetClass::key_press_event' o='3456' t='gboolean (*)(GtkWidget *, GdkEventKey *)'/>
<mbr r='_GtkWidgetClass::key_release_event' o='3520' t='gboolean (*)(GtkWidget *, GdkEventKey *)'/>
<mbr r='_GtkWidgetClass::enter_notify_event' o='3584' t='gboolean (*)(GtkWidget *, GdkEventCrossing *)'/>
<mbr r='_GtkWidgetClass::leave_notify_event' o='3648' t='gboolean (*)(GtkWidget *, GdkEventCrossing *)'/>
<mbr r='_GtkWidgetClass::configure_event' o='3712' t='gboolean (*)(GtkWidget *, GdkEventConfigure *)'/>
<mbr r='_GtkWidgetClass::focus_in_event' o='3776' t='gboolean (*)(GtkWidget *, GdkEventFocus *)'/>
<mbr r='_GtkWidgetClass::focus_out_event' o='3840' t='gboolean (*)(GtkWidget *, GdkEventFocus *)'/>
<mbr r='_GtkWidgetClass::map_event' o='3904' t='gboolean (*)(GtkWidget *, GdkEventAny *)'/>
<mbr r='_GtkWidgetClass::unmap_event' o='3968' t='gboolean (*)(GtkWidget *, GdkEventAny *)'/>
<mbr r='_GtkWidgetClass::property_notify_event' o='4032' t='gboolean (*)(GtkWidget *, GdkEventProperty *)'/>
<mbr r='_GtkWidgetClass::selection_clear_event' o='4096' t='gboolean (*)(GtkWidget *, GdkEventSelection *)'/>
<mbr r='_GtkWidgetClass::selection_request_event' o='4160' t='gboolean (*)(GtkWidget *, GdkEventSelection *)'/>
<mbr r='_GtkWidgetClass::selection_notify_event' o='4224' t='gboolean (*)(GtkWidget *, GdkEventSelection *)'/>
<mbr r='_GtkWidgetClass::proximity_in_event' o='4288' t='gboolean (*)(GtkWidget *, GdkEventProximity *)'/>
<mbr r='_GtkWidgetClass::proximity_out_event' o='4352' t='gboolean (*)(GtkWidget *, GdkEventProximity *)'/>
<mbr r='_GtkWidgetClass::visibility_notify_event' o='4416' t='gboolean (*)(GtkWidget *, GdkEventVisibility *)'/>
<mbr r='_GtkWidgetClass::window_state_event' o='4480' t='gboolean (*)(GtkWidget *, GdkEventWindowState *)'/>
<mbr r='_GtkWidgetClass::damage_event' o='4544' t='gboolean (*)(GtkWidget *, GdkEventExpose *)'/>
<mbr r='_GtkWidgetClass::grab_broken_event' o='4608' t='gboolean (*)(GtkWidget *, GdkEventGrabBroken *)'/>
<mbr r='_GtkWidgetClass::selection_get' o='4672' t='void (*)(GtkWidget *, GtkSelectionData *, guint, guint)'/>
<mbr r='_GtkWidgetClass::selection_received' o='4736' t='void (*)(GtkWidget *, GtkSelectionData *, guint)'/>
<mbr r='_GtkWidgetClass::drag_begin' o='4800' t='void (*)(GtkWidget *, GdkDragContext *)'/>
<mbr r='_GtkWidgetClass::drag_end' o='4864' t='void (*)(GtkWidget *, GdkDragContext *)'/>
<mbr r='_GtkWidgetClass::drag_data_get' o='4928' t='void (*)(GtkWidget *, GdkDragContext *, GtkSelectionData *, guint, guint)'/>
<mbr r='_GtkWidgetClass::drag_data_delete' o='4992' t='void (*)(GtkWidget *, GdkDragContext *)'/>
<mbr r='_GtkWidgetClass::drag_leave' o='5056' t='void (*)(GtkWidget *, GdkDragContext *, guint)'/>
<mbr r='_GtkWidgetClass::drag_motion' o='5120' t='gboolean (*)(GtkWidget *, GdkDragContext *, gint, gint, guint)'/>
<mbr r='_GtkWidgetClass::drag_drop' o='5184' t='gboolean (*)(GtkWidget *, GdkDragContext *, gint, gint, guint)'/>
<mbr r='_GtkWidgetClass::drag_data_received' o='5248' t='void (*)(GtkWidget *, GdkDragContext *, gint, gint, GtkSelectionData *, guint, guint)'/>
<mbr r='_GtkWidgetClass::drag_failed' o='5312' t='gboolean (*)(GtkWidget *, GdkDragContext *, GtkDragResult)'/>
<mbr r='_GtkWidgetClass::popup_menu' o='5376' t='gboolean (*)(GtkWidget *)'/>
<mbr r='_GtkWidgetClass::show_help' o='5440' t='gboolean (*)(GtkWidget *, GtkWidgetHelpType)'/>
<mbr r='_GtkWidgetClass::get_accessible' o='5504' t='AtkObject *(*)(GtkWidget *)'/>
<mbr r='_GtkWidgetClass::screen_changed' o='5568' t='void (*)(GtkWidget *, GdkScreen *)'/>
<mbr r='_GtkWidgetClass::can_activate_accel' o='5632' t='gboolean (*)(GtkWidget *, guint)'/>
<mbr r='_GtkWidgetClass::composited_changed' o='5696' t='void (*)(GtkWidget *)'/>
<mbr r='_GtkWidgetClass::query_tooltip' o='5760' t='gboolean (*)(GtkWidget *, gint, gint, gboolean, GtkTooltip *)'/>
<mbr r='_GtkWidgetClass::compute_expand' o='5824' t='void (*)(GtkWidget *, gboolean *, gboolean *)'/>
<mbr r='_GtkWidgetClass::adjust_size_request' o='5888' t='void (*)(GtkWidget *, GtkOrientation, gint *, gint *)'/>
<mbr r='_GtkWidgetClass::adjust_size_allocation' o='5952' t='void (*)(GtkWidget *, GtkOrientation, gint *, gint *, gint *, gint *)'/>
<mbr r='_GtkWidgetClass::style_updated' o='6016' t='void (*)(GtkWidget *)'/>
<mbr r='_GtkWidgetClass::touch_event' o='6080' t='gboolean (*)(GtkWidget *, GdkEventTouch *)'/>
<mbr r='_GtkWidgetClass::get_preferred_height_and_baseline_for_width' o='6144' t='void (*)(GtkWidget *, gint, gint *, gint *, gint *, gint *)'/>
<mbr r='_GtkWidgetClass::adjust_baseline_request' o='6208' t='void (*)(GtkWidget *, gint *, gint *)'/>
<mbr r='_GtkWidgetClass::adjust_baseline_allocation' o='6272' t='void (*)(GtkWidget *, gint *)'/>
<mbr r='_GtkWidgetClass::queue_draw_region' o='6336' t='void (*)(GtkWidget *, const cairo_region_t *)'/>
<mbr r='_GtkWidgetClass::priv' o='6400' t='GtkWidgetClassPrivate *'/>
<mbr r='_GtkWidgetClass::_gtk_reserved6' o='6464' t='void (*)()'/>
<mbr r='_GtkWidgetClass::_gtk_reserved7' o='6528' t='void (*)()'/>
